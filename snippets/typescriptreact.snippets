# MAKE SURE TO COPY ANY CHANGES TO THE TYPESCRIPTREACT FILE TOO
snippet erf "Explicit return function"
	const ${1:name} = (${2:params}) => {
		${0:$VISUAL}
	}

snippet irf "Implicit return function"
	const ${1:name} = (${2:params}) => (
	  ${0:$VISUAL}
  )

# Describe block with test
snippet describe "Describe block"
	describe('${1:BlockName}', () => {
		it('${2:TestName}', () => {
			${0:${VISUAL}}
		})
	})

# Test block
snippet test "Test block"
	it('${2:TestName}', () => {
		${0:${VISUAL}}
	})

# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}

# if ... else
snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	} else {

# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}

snippet case "case 'xyz': ... break"
	case '${1:case}':
		${0:${VISUAL}}
		break;

snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	}

snippet clv "console.log"
	console.log('${1/.*/\0/g}: ', ${1}); // eslint-disable-line no-console
snippet cl "console.log"
	console.log(${1}); // eslint-disable-line no-console
snippet const
	const ${1} = ${0};

snippet imp "import { member } from 'xyz'"
	import { ${1} } from '${2}';
	
snippet ima "import * from 'xyz'"
	import * from '${1}';
snippet expa "export * from 'xyz'"
	export * from '${1}';
snippet exp "export { member } from 'xyz'"
	export { ${1} } from '${2}';
snippet af "() =>"
	(${1}) => ${0:${VISUAL}}
snippet afb "() => {}"
	(${1}) => {
		${0:${VISUAL}}
	}

# Component file
snippet ncf "Full component file"
	import { FC } from 'react';

	type $1Props = {
		${3:types}
	}

	export const ${1:ComponentName}: FC<$1Props> = ({${2:props}}) => {
		${4:body}

		return (
			${5}
		);
	};

snippet nc "New component"
	type $1Props = {
		${3:types}
	}

	export const ${1:ComponentName}: FC<$1Props> = ({${2:props}}) => {
		${4:body}

		return (
			${5}
		);
	};

# Hooks
snippet uses useState
	const [${1:state}, set${1/.*/\u\0/g}] = useState(${2:initialState});

snippet usee useEffect
	useEffect(() => {
		${1}
	}, [${0}]);

snippet userd useReducer
	const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer});

snippet userf useRef
	const ${1:refContainer} = useRef(${2:initialValue});

snippet usect useContext
	const ${1:value} = useContext(${2:MyContext});

snippet usecb useCallback
	const ${1:memoizedCallback} = useCallback(
	() => {
		${2}(${3})
	},
	[$3]
	);

snippet usem useMemo
	const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3]);
